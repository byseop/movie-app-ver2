{"version":3,"sources":["component/Movie.js","component/MovieWrapper.js","App.js","serviceWorker.js","store/MovieStore.js","index.js","images/bg.png"],"names":["Movie","handleMouseEnter","changeBg","_this","props","bg","store","_changeMovieBg","react_default","a","createElement","className","onMouseOver","this","src","poster","alt","title","id","vote_average","Component","MovieWrapper","inject","observer","_renderMovie","movieList","map","movie","component_Movie","key","poster_path","backdrop_path","_getMovies","bgStyle","backgroundImage","bgpng","movieBg","backgroundSize","backgroundPosition","opacity","Fragment","style","isMovieLoded","CircularProgress_default","App","component_MovieWrapper","Boolean","window","location","hostname","match","configure","enforceActions","observable","action","sortPram","SORT","axios","get","then","response","data","catch","err","console","log","movieObj","_","isEmpty","_callee","movies","regenerator_default","wrap","_context","prev","next","_this2","_callApi","sent","results","_checkMovieLoad","stop","theMovieBg","_this3","ReactDOM","render","index_module","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2394e8d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Movie extends Component{\r\n\r\n  handleMouseEnter = () => {\r\n    const changeBg = this.props.bg;\r\n    this.props.store._changeMovieBg(changeBg);\r\n  }\r\n\r\n  render() {\r\n    const posterUrl = 'https://image.tmdb.org/t/p/original';\r\n    return (\r\n      <div className=\"Movie__Box\" onMouseOver={this.handleMouseEnter}>\r\n        <div className=\"Poster__Wrap\"><img src={posterUrl + this.props.poster} alt={this.props.title} /></div>\r\n        <div>{this.props.id}</div>       \r\n        <div className=\"Movie__Info\">\r\n          <h4>{this.props.title}</h4>       \r\n          <p><i className=\"fas fa-star\"></i>{this.props.vote_average}</p>    \r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport Movie from './Movie';\r\nimport _ from 'lodash';\r\nimport CircularPropgress from '@material-ui/core/CircularProgress';\r\nimport '../css/Movie.css';\r\nimport bgpng from '../images/bg.png';\r\n\r\n@inject('store')\r\n@observer\r\nclass MovieWrapper extends Component {\r\n  componentDidMount(){\r\n    this.props.store._getMovies(0);\r\n  }\r\n\r\n _renderMovie = () => {\r\n   const movies = this.props.store.movieList.map(movie => {\r\n     return <Movie \r\n       key={movie.id}\r\n       title={movie.title}\r\n       poster={movie.poster_path}\r\n       bg={movie.backdrop_path}\r\n       vote_average={movie.vote_average}\r\n       store={this.props.store}\r\n     />\r\n   })\r\n   return movies;\r\n }\r\n\r\n render() {\r\n   const store = this.props.store;\r\n\r\n   const posterUrl = 'https://image.tmdb.org/t/p/original'\r\n   const bgStyle = {\r\n     backgroundImage: 'url('+bgpng+')' + ',' + 'url(' + posterUrl + this.props.store.movieBg + ')',\r\n     backgroundSize: 'cover',\r\n     backgroundPosition: 'center center',\r\n     opacity: '.5'\r\n   }\r\n\r\n   return (\r\n      <>\r\n      <div className=\"Detail__View\">\r\n        <div className=\"Movie__Bg\" style={bgStyle} />\r\n      </div>\r\n      <div className=\"Now__Playing\">\r\n        <h3>현재 상영중인 영화</h3>\r\n        <div className=\"Movie__Wrapper\">{ store.isMovieLoded ? this._renderMovie() : <div className=\"Loading\"><CircularPropgress /></div> }</div>\r\n      </div>\r\n      </>\r\n   );\r\n }\r\n}\r\n\r\nexport default MovieWrapper;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react'\nimport MovieWrapper from './component/MovieWrapper';\nimport './App.css';\n\n@inject('store')\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MovieWrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action, configure } from 'mobx';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n// action 을 통해서 상태변경\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nclass MovieStore {\r\n  @observable movieList = [];\r\n  @observable isMovieLoded = false;\r\n  @observable sortMethod = '';\r\n  @observable movieBg = '';\r\n\r\n  @action _callApi = (sortPram) => {\r\n    let SORT = '';\r\n    const NOW_PLAYING = '/now_playing';\r\n    const DEFAULT_URL = 'https://api.themoviedb.org/3/movie';\r\n    const API_KEY = '?api_key=dc11dbd0605b4d60cc66ce5e8363e063';\r\n    const LANGUAGE_KR = '&language=ko-KR';\r\n\r\n    // eslint-disable-next-line to the line before.\r\n    if ( sortPram == '0') SORT = NOW_PLAYING // 소트0 -> 현재상영중\r\n    \r\n    return axios.get(DEFAULT_URL + SORT + API_KEY + LANGUAGE_KR)\r\n      .then (response => response.data)\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action _checkMovieLoad = (movieObj) => {\r\n    if ( !_.isEmpty(movieObj) ) this.isMovieLoded = !this.isMovieLoded;\r\n    else console.log('Error!');\r\n  }\r\n  \r\n  @action _getMovies = async(sortPram) => {\r\n    const movies = await this._callApi(sortPram);\r\n    this.movieList = movies.results;\r\n    console.log(this.movieList);\r\n    this._checkMovieLoad(this.movieList);\r\n    this._changeMovieBg(this.movieList[0].backdrop_path)\r\n  }  \r\n  \r\n  @action _changeMovieBg = (theMovieBg) => {\r\n    this.movieBg = theMovieBg;\r\n  }\r\n}\r\n\r\nconst store = new MovieStore();\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport store from './store/MovieStore';\n\nReactDOM.render(\n  <Provider store={store}> \n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.22c3457c.png\";"],"sourceRoot":""}